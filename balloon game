<!DOCTYPE html>
<html>
<head>
    <title>Balloon Pop Game</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background: #87CEEB; /* Sky blue fallback */
        }
        #gameCanvas {
            display: block;
        }
        .city-background {
            position: absolute;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1449824913935-59a10b8d2000?auto=format&fit=crop&q=80') no-repeat bottom;
            background-size: cover;
            z-index: -1;
            opacity: 0.9;
        }
    </style>
</head>
<body>
    <div class="black-background""></div>
    <canvas id="gameCanvas"></canvas>
    <!-- Sound effects (using free online sources - replace with your own if needed) -->
    <audio id="shootSound" src="https://assets.mixkit.co/sfx/preview/mixkit-fast-small-sweep-transition-166.mp3"></audio>
    <audio id="popSound" src="https://assets.mixkit.co/sfx/preview/mixkit-inflatable-balloon-burst-3069.mp3"></audio>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // Set canvas size
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        // Audio
        const shootSound = document.getElementById('shootSound');
        const popSound = document.getElementById('popSound');

        // Machine Gun
        const gun = {
            x: canvas.width / 2,
            y: canvas.height - 50,
            width: 60,
            height: 40,
            speed: 5,
            dx: 0
        };

        // Game state
        let bullets = [];
        let balloons = [];
        let score = 0;
        let lives = 3;
        let gameOver = false;

        // Game controls
        let rightPressed = false;
        let leftPressed = false;
        let spacePressed = false;
        let lastShot = 0;
        const firingRate = 100; // milliseconds between shots

        // Event listeners
        document.addEventListener('keydown', keyDownHandler);
        document.addEventListener('keyup', keyUpHandler);

        function keyDownHandler(e) {
            if (e.key === 'Right' || e.key === 'ArrowRight') rightPressed = true;
            if (e.key === 'Left' || e.key === 'ArrowLeft') leftPressed = true;
            if (e.key === ' ') spacePressed = true;
        }

        function keyUpHandler(e) {
            if (e.key === 'Right' || e.key === 'ArrowRight') rightPressed = false;
            if (e.key === 'Left' || e.key === 'ArrowLeft') leftPressed = false;
            if (e.key === ' ') spacePressed = false;
        }

        // Draw machine gun
        function drawGun() {
            ctx.beginPath();
            // Base
            ctx.rect(gun.x - gun.width/2, gun.y, gun.width, gun.height/2);
            // Barrel
            ctx.rect(gun.x - 5, gun.y - 20, 10, 20);
            ctx.fillStyle = '#4A4A4A';
            ctx.fill();
            ctx.closePath();
        }

        // Draw bullet
        function drawBullet(bullet) {
            ctx.beginPath();
            ctx.rect(bullet.x, bullet.y, 2, 8);
            ctx.fillStyle = 'yellow';
            ctx.fill();
            ctx.closePath();
        }

        // Draw balloon
        function drawBalloon(balloon) {
            // Balloon body
            ctx.beginPath();
            ctx.arc(balloon.x, balloon.y, balloon.radius, 0, Math.PI * 2);
            ctx.fillStyle = balloon.color;
            ctx.fill();
            ctx.closePath();

            // String
            ctx.beginPath();
            ctx.moveTo(balloon.x, balloon.y + balloon.radius);
            ctx.lineTo(balloon.x, balloon.y + balloon.radius + 20);
            ctx.strokeStyle = '#FFFFFF';
            ctx.stroke();
        }

        // Spawn balloons
        function spawnBalloon() {
            if (!gameOver) {
                const radius = Math.random() * 20 + 20;
                const x = Math.random() * (canvas.width - radius * 2) + radius;
                const y = canvas.height + radius;
                const speed = Math.random() * 2 + 1;
                const colors = ['red', 'blue', 'yellow', 'green', 'purple'];
                const color = colors[Math.floor(Math.random() * colors.length)];
                balloons.push({ x, y, radius, speed, color });
            }
        }

        // Update game objects
        function update(timestamp) {
            if (gameOver) return;

            // Gun movement
            if (rightPressed && gun.x < canvas.width - gun.width/2) gun.x += gun.speed;
            if (leftPressed && gun.x > gun.width/2) gun.x -= gun.speed;

            // Machine gun firing
            if (spacePressed && timestamp - lastShot >= firingRate) {
                bullets.push({ x: gun.x, y: gun.y - 20 });
                shootSound.currentTime = 0;
                shootSound.play();
                lastShot = timestamp;
            }

            // Update bullets
            bullets.forEach((bullet, index) => {
                bullet.y -= 8;
                if (bullet.y < 0) bullets.splice(index, 1);
            });

            // Update balloons
            balloons.forEach((balloon, balloonIndex) => {
                balloon.y -= balloon.speed;

                // Collision detection with bullets
                bullets.forEach((bullet, bulletIndex) => {
                    const dist = Math.sqrt(
                        (bullet.x - balloon.x) ** 2 + 
                        (bullet.y - balloon.y) ** 2
                    );
                    if (dist < balloon.radius) {
                        balloons.splice(balloonIndex, 1);
                        bullets.splice(bulletIndex, 1);
                        score += 10;
                        popSound.currentTime = 0;
                        popSound.play();
                    }
                });

                // Balloon off screen (lose life)
                if (balloon.y < -balloon.radius) {
                    balloons.splice(balloonIndex, 1);
                    lives--;
                    if (lives <= 0) {
                        gameOver = true;
                    }
                }
            });
        }

        // Draw HUD (score and lives)
        function drawHUD() {
            ctx.font = '20px Arial';
            ctx.fillStyle = 'white';
            ctx.fillText(`Score: ${score}`, 20, 30);
            ctx.fillText(`Lives: ${lives}`, 20, 60);

            if (gameOver) {
                ctx.font = '40px Arial';
                ctx.fillStyle = 'red';
                ctx.textAlign = 'center';
                ctx.fillText('GAME OVER', canvas.width/2, canvas.height/2);
                ctx.font = '20px Arial';
                ctx.fillText('Press F5 to restart', canvas.width/2, canvas.height/2 + 40);
            }
        }

        // Main game loop
        function draw(timestamp) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            drawGun();
            bullets.forEach(drawBullet);
            balloons.forEach(drawBalloon);
            drawHUD();

            update(timestamp);

            requestAnimationFrame(draw);
        }

        // Spawn balloons periodically
        setInterval(spawnBalloon, 800);

        // Start game
        requestAnimationFrame(draw);
    </script>
</body>
</html>
